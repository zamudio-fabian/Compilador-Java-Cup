/* The following code was generated by JFlex 1.7.0 */

package com.lexical.analyzer;
import com.lexical.analyzer.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/macbookpro/workspace/Compilador/src/com/lexical/analyzer/Lexico.flex</tt>
 */
class Lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\4\1\72\1\5\1\4\22\0\1\4\1\14\1\21"+
    "\5\0\1\70\1\71\1\11\1\6\1\16\1\7\1\3\1\10\12\2"+
    "\1\17\1\20\1\13\1\15\1\12\2\0\1\41\1\1\1\40\1\44"+
    "\1\43\1\1\1\62\1\51\1\60\2\1\1\57\1\63\1\53\1\45"+
    "\1\61\1\1\1\52\1\42\1\50\6\1\1\66\1\0\1\67\1\0"+
    "\1\1\1\0\1\25\1\46\1\56\1\35\1\24\1\36\1\33\1\55"+
    "\1\31\1\1\1\47\1\26\1\1\1\32\1\34\2\1\1\23\1\27"+
    "\1\30\1\1\1\37\1\54\3\1\1\64\1\0\1\65\7\0\1\72"+
    "\33\0\1\22\57\0\1\22\37\0\1\22\u1f36\0\1\72\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\1\1\13\1\14\1\15\1\1"+
    "\20\2\1\16\1\17\1\20\1\21\1\22\1\23\2\0"+
    "\1\24\1\25\1\26\1\27\1\30\1\0\1\31\6\2"+
    "\1\32\2\2\1\33\12\2\1\34\1\0\5\2\1\35"+
    "\2\2\1\36\11\2\1\37\1\40\5\2\1\41\3\2"+
    "\1\42\11\2\1\43\5\2\1\44\5\2\1\45\1\46"+
    "\1\47\1\2\1\50\1\51\2\2\1\52\1\53\6\2"+
    "\1\54\4\2\1\55\2\2\2\0\2\2\2\0\2\2"+
    "\24\0\1\56\1\57\4\0\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\73\0\354\0\73"+
    "\0\73\0\u0127\0\u0162\0\u019d\0\u01d8\0\73\0\u0213\0\73"+
    "\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb"+
    "\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3"+
    "\0\u05fe\0\73\0\73\0\73\0\73\0\73\0\73\0\u0639"+
    "\0\u0674\0\73\0\73\0\73\0\73\0\73\0\u024e\0\73"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\166\0\u0811"+
    "\0\u084c\0\166\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0639\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\166\0\u0c37\0\u0c72\0\166\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85"+
    "\0\166\0\166\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\166"+
    "\0\u0fe7\0\u1022\0\u105d\0\166\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\166\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\u1397\0\166\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\166\0\166\0\166\0\u14f9\0\166\0\166\0\u1534"+
    "\0\u156f\0\166\0\166\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u16d1\0\166\0\u170c\0\u1747\0\u1782\0\u17bd\0\166\0\u17f8"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\73\0\73\0\u1ee2"+
    "\0\u1f1d\0\u1f58\0\u1f93\0\73\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\0\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\2\1\22\1\23\1\3\1\24\1\25"+
    "\1\3\1\26\2\3\1\27\1\30\1\31\1\3\1\32"+
    "\2\3\1\33\1\34\1\35\1\36\5\3\1\37\1\3"+
    "\1\40\2\3\1\41\2\3\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\75\0\2\3\20\0\41\3\11\0\1\4"+
    "\1\50\77\0\1\51\77\0\1\52\72\0\1\53\72\0"+
    "\1\54\72\0\1\55\72\0\1\56\56\0\20\57\1\60"+
    "\42\57\10\0\2\3\20\0\1\3\1\61\37\3\10\0"+
    "\2\3\20\0\3\3\1\62\3\3\1\63\31\3\10\0"+
    "\2\3\20\0\11\3\1\64\27\3\10\0\2\3\20\0"+
    "\5\3\1\65\33\3\10\0\2\3\20\0\7\3\1\66"+
    "\3\3\1\67\25\3\10\0\2\3\20\0\5\3\1\70"+
    "\33\3\10\0\2\3\20\0\1\3\1\71\7\3\1\72"+
    "\27\3\10\0\2\3\20\0\11\3\1\73\27\3\10\0"+
    "\2\3\20\0\16\3\1\74\22\3\10\0\2\3\20\0"+
    "\30\3\1\75\10\3\10\0\2\3\20\0\20\3\1\76"+
    "\1\3\1\72\16\3\10\0\2\3\20\0\25\3\1\77"+
    "\13\3\10\0\2\3\20\0\1\100\40\3\10\0\2\3"+
    "\20\0\1\101\31\3\1\102\6\3\10\0\2\3\20\0"+
    "\2\3\1\103\36\3\10\0\2\3\20\0\27\3\1\104"+
    "\11\3\11\0\1\105\70\0\10\51\1\106\62\51\1\0"+
    "\2\3\20\0\2\3\1\107\36\3\10\0\2\3\20\0"+
    "\4\3\1\110\34\3\10\0\2\3\20\0\12\3\1\111"+
    "\26\3\10\0\2\3\20\0\7\3\1\112\31\3\10\0"+
    "\2\3\20\0\1\113\40\3\10\0\2\3\20\0\5\3"+
    "\1\114\33\3\10\0\2\3\20\0\32\3\1\115\6\3"+
    "\10\0\2\3\20\0\13\3\1\116\25\3\10\0\2\3"+
    "\20\0\1\117\40\3\10\0\2\3\20\0\17\3\1\120"+
    "\21\3\10\0\2\3\20\0\21\3\1\121\17\3\10\0"+
    "\2\3\20\0\15\3\1\122\23\3\10\0\2\3\20\0"+
    "\26\3\1\123\12\3\10\0\2\3\20\0\1\3\1\124"+
    "\37\3\10\0\2\3\20\0\6\3\1\125\32\3\10\0"+
    "\2\3\20\0\6\3\1\126\32\3\10\0\2\3\20\0"+
    "\4\3\1\127\34\3\10\0\2\3\20\0\22\3\1\130"+
    "\16\3\7\0\7\51\1\5\1\106\62\51\1\0\2\3"+
    "\20\0\3\3\1\131\35\3\10\0\2\3\20\0\1\3"+
    "\1\132\37\3\10\0\2\3\20\0\6\3\1\133\3\3"+
    "\1\134\1\135\15\3\1\136\1\3\1\137\5\3\10\0"+
    "\2\3\20\0\10\3\1\140\30\3\10\0\2\3\20\0"+
    "\6\3\1\141\32\3\10\0\2\3\20\0\1\3\1\142"+
    "\37\3\10\0\2\3\20\0\14\3\1\143\24\3\10\0"+
    "\2\3\20\0\20\3\1\144\20\3\10\0\2\3\20\0"+
    "\15\3\1\145\3\3\1\146\14\3\1\147\2\3\10\0"+
    "\2\3\20\0\34\3\1\150\4\3\10\0\2\3\20\0"+
    "\20\3\1\151\20\3\10\0\2\3\20\0\2\3\1\152"+
    "\36\3\10\0\2\3\20\0\5\3\1\153\33\3\10\0"+
    "\2\3\20\0\3\3\1\154\35\3\10\0\2\3\20\0"+
    "\1\3\1\144\37\3\10\0\2\3\20\0\37\3\1\155"+
    "\1\3\10\0\2\3\20\0\13\3\1\156\25\3\10\0"+
    "\2\3\20\0\1\3\1\157\37\3\10\0\2\3\20\0"+
    "\11\3\1\160\27\3\10\0\2\3\20\0\32\3\1\161"+
    "\6\3\10\0\2\3\20\0\2\3\1\162\36\3\10\0"+
    "\2\3\20\0\7\3\1\163\31\3\10\0\2\3\20\0"+
    "\1\164\40\3\10\0\2\3\20\0\2\3\1\165\36\3"+
    "\10\0\2\3\20\0\16\3\1\166\22\3\10\0\2\3"+
    "\20\0\20\3\1\167\20\3\10\0\2\3\20\0\27\3"+
    "\1\170\11\3\10\0\2\3\20\0\16\3\1\171\22\3"+
    "\10\0\2\3\20\0\27\3\1\164\11\3\10\0\2\3"+
    "\20\0\24\3\1\172\14\3\10\0\2\3\20\0\1\3"+
    "\1\173\37\3\10\0\2\3\20\0\1\3\1\174\37\3"+
    "\10\0\2\3\20\0\27\3\1\175\11\3\10\0\2\3"+
    "\20\0\13\3\1\176\25\3\10\0\2\3\20\0\1\177"+
    "\40\3\10\0\2\3\20\0\6\3\1\200\32\3\10\0"+
    "\2\3\20\0\4\3\1\201\34\3\10\0\2\3\20\0"+
    "\10\3\1\202\30\3\10\0\2\3\20\0\1\203\40\3"+
    "\10\0\2\3\20\0\17\3\1\204\21\3\10\0\2\3"+
    "\20\0\15\3\1\205\23\3\10\0\2\3\20\0\22\3"+
    "\1\206\16\3\10\0\2\3\20\0\27\3\1\207\11\3"+
    "\10\0\2\3\20\0\16\3\1\210\22\3\10\0\2\3"+
    "\20\0\3\3\1\211\35\3\10\0\2\3\20\0\1\3"+
    "\1\212\37\3\10\0\2\3\20\0\20\3\1\212\20\3"+
    "\10\0\2\3\20\0\34\3\1\213\4\3\10\0\2\3"+
    "\20\0\37\3\1\214\1\3\10\0\2\3\20\0\20\3"+
    "\1\215\20\3\10\0\2\3\20\0\40\3\1\216\10\0"+
    "\2\3\20\0\1\3\1\217\37\3\10\0\2\3\20\0"+
    "\16\3\1\220\22\3\10\0\2\3\20\0\27\3\1\221"+
    "\11\3\10\0\2\3\1\222\17\0\41\3\10\0\2\3"+
    "\1\223\17\0\41\3\10\0\2\3\20\0\27\3\1\224"+
    "\11\3\10\0\2\3\20\0\16\3\1\225\22\3\51\0"+
    "\1\226\72\0\1\227\31\0\2\3\20\0\20\3\1\230"+
    "\20\3\10\0\2\3\20\0\40\3\1\231\52\0\1\232"+
    "\72\0\1\233\30\0\2\3\1\234\17\0\41\3\10\0"+
    "\2\3\1\235\17\0\41\3\47\0\1\236\72\0\1\237"+
    "\74\0\1\240\72\0\1\241\100\0\1\242\72\0\1\243"+
    "\65\0\1\244\72\0\1\245\107\0\1\246\72\0\1\247"+
    "\52\0\1\250\72\0\1\251\77\0\1\252\72\0\1\253"+
    "\75\0\1\254\72\0\1\255\75\0\1\256\72\0\1\257"+
    "\77\0\1\260\72\0\1\261\57\0\1\262\72\0\1\263"+
    "\100\0\1\264\72\0\1\265\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8142];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\2\11\4\1\1\11"+
    "\1\1\1\11\21\1\6\11\2\0\5\11\1\0\1\11"+
    "\25\1\1\0\113\1\2\0\2\1\2\0\2\1\24\0"+
    "\2\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public boolean hasError = false;
public String errorMessage = "";
public int errorLine = 0;
public int errorColumn = 0;

private TablaSimbolo symbolTable = new TablaSimbolo(); 

public void addReal( String value){	
    boolean isOk = symbolTable.addReal( value);
    if(!isOk) makeError("Real out of range");
}

public void addString( String value) {
    boolean isOk = symbolTable.addString(value);
    if(!isOk) makeError("String out of range");
}

public void addId( String value) {
    boolean isOk = symbolTable.addId(value);
    if(!isOk) makeError("ID out of range");
}

public void addInt(String value) {
    boolean isOk = symbolTable.addInt(value);
    if(!isOk) makeError("Integer out of range");
}

public void makeError(String error) {
    hasError = true;
    errorMessage = error;
    errorLine = yyline + 1;
    errorColumn = yycolumn + 1;
}

public void save(){
    symbolTable.save();
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { makeError("Symbol not defined");return Tokens.ERROR;
            } 
            // fall through
          case 50: break;
          case 2: 
            { addId(yytext());return Tokens.ID;
            } 
            // fall through
          case 51: break;
          case 3: 
            { addInt(yytext()); return Tokens.CONST_INT;
            } 
            // fall through
          case 52: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 53: break;
          case 5: 
            { return Tokens.OP_SUMA;
            } 
            // fall through
          case 54: break;
          case 6: 
            { return Tokens.OP_RESTA;
            } 
            // fall through
          case 55: break;
          case 7: 
            { return Tokens.OP_DIVISION;
            } 
            // fall through
          case 56: break;
          case 8: 
            { return Tokens.OP_MULTIPLICACION;
            } 
            // fall through
          case 57: break;
          case 9: 
            { return Tokens.OP_MAYOR;
            } 
            // fall through
          case 58: break;
          case 10: 
            { return Tokens.OP_MENOR;
            } 
            // fall through
          case 59: break;
          case 11: 
            { return Tokens.COMA;
            } 
            // fall through
          case 60: break;
          case 12: 
            { return Tokens.DOS_PUNTOS;
            } 
            // fall through
          case 61: break;
          case 13: 
            { return Tokens.FIN_INSTRUCCION;
            } 
            // fall through
          case 62: break;
          case 14: 
            { return Tokens.BLOQUE_ABRE;
            } 
            // fall through
          case 63: break;
          case 15: 
            { return Tokens.BLOQUE_CIERRA;
            } 
            // fall through
          case 64: break;
          case 16: 
            { return Tokens.CORCHETE_ABRE;
            } 
            // fall through
          case 65: break;
          case 17: 
            { return Tokens.CORCHETE_CIERRA;
            } 
            // fall through
          case 66: break;
          case 18: 
            { return Tokens.PARENTESIS_ABRE;
            } 
            // fall through
          case 67: break;
          case 19: 
            { return Tokens.PARENTESIS_CIERRA;
            } 
            // fall through
          case 68: break;
          case 20: 
            { return Tokens.OP_MAYOR_IGUAL;
            } 
            // fall through
          case 69: break;
          case 21: 
            { return Tokens.OP_MENOR_IGUAL;
            } 
            // fall through
          case 70: break;
          case 22: 
            { return Tokens.OP_DISTINTO;
            } 
            // fall through
          case 71: break;
          case 23: 
            { return Tokens.OP_IGUAL;
            } 
            // fall through
          case 72: break;
          case 24: 
            { return Tokens.OP_ASIGNACION;
            } 
            // fall through
          case 73: break;
          case 25: 
            { addString(yytext()); return Tokens.CONST_STRING;
            } 
            // fall through
          case 74: break;
          case 26: 
            { return Tokens.IF;
            } 
            // fall through
          case 75: break;
          case 27: 
            { return Tokens.DO;
            } 
            // fall through
          case 76: break;
          case 28: 
            { addReal(yytext()); return Tokens.CONST_REAL;
            } 
            // fall through
          case 77: break;
          case 29: 
            { return Tokens.TIPO_INT;
            } 
            // fall through
          case 78: break;
          case 30: 
            { return Tokens.FOR;
            } 
            // fall through
          case 79: break;
          case 31: 
            { return Tokens.TIPO_REAL;
            } 
            // fall through
          case 80: break;
          case 32: 
            { return Tokens.ELSE;
            } 
            // fall through
          case 81: break;
          case 33: 
            { return Tokens.LONG;
            } 
            // fall through
          case 82: break;
          case 34: 
            { return Tokens.CASE;
            } 
            // fall through
          case 83: break;
          case 35: 
            { return Tokens.ENDIF;
            } 
            // fall through
          case 84: break;
          case 36: 
            { return Tokens.OTHER;
            } 
            // fall through
          case 85: break;
          case 37: 
            { return Tokens.BREAK;
            } 
            // fall through
          case 86: break;
          case 38: 
            { return Tokens.WRITE;
            } 
            // fall through
          case 87: break;
          case 39: 
            { return Tokens.WHILE;
            } 
            // fall through
          case 88: break;
          case 40: 
            { return Tokens.ENDDEF;
            } 
            // fall through
          case 89: break;
          case 41: 
            { return Tokens.ENDFOR;
            } 
            // fall through
          case 90: break;
          case 42: 
            { return Tokens.TIPO_STRING;
            } 
            // fall through
          case 91: break;
          case 43: 
            { return Tokens.DEFVAR;
            } 
            // fall through
          case 92: break;
          case 44: 
            { return Tokens.ENDCASE;
            } 
            // fall through
          case 93: break;
          case 45: 
            { return Tokens.ENDWHILE;
            } 
            // fall through
          case 94: break;
          case 46: 
            { return Tokens.DECLARESECTION;
            } 
            // fall through
          case 95: break;
          case 47: 
            { return Tokens.PROGRAMSECTION;
            } 
            // fall through
          case 96: break;
          case 48: 
            { return Tokens.ENDDECLARESECTION;
            } 
            // fall through
          case 97: break;
          case 49: 
            { return Tokens.ENDPROGRAMSECTION;
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
