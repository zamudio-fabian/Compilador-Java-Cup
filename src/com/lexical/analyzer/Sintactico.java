
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.lexical.analyzer;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\004\005\000\002\005\004\000\002\005\003" +
    "\000\002\006\006\000\002\007\005\000\002\007\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\010\005\000\002\011\004\000\002\011\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\027\003\000\002\027\003\000\002\015\011\000\002" +
    "\015\005\000\002\021\004\000\002\020\010\000\002\020" +
    "\011\000\002\022\010\000\002\024\007\000\002\023\006" +
    "\000\002\023\006\000\002\025\006\000\002\026\006\000" +
    "\002\026\005\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\006\032\005\034\010\001\002\000\004\002" +
    "\146\001\002\000\010\006\135\007\133\010\134\001\002" +
    "\000\004\002\000\001\002\000\004\034\010\001\002\000" +
    "\014\016\022\023\016\025\011\026\017\030\015\001\002" +
    "\000\004\062\122\001\002\000\032\014\ufff2\015\ufff2\016" +
    "\ufff2\020\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\035\ufff2\001\002\000\032\014\ufff1\015" +
    "\ufff1\016\ufff1\020\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\035\ufff1\001\002\000\032\014" +
    "\ufff3\015\ufff3\016\ufff3\020\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\035\ufff3\001\002\000" +
    "\004\062\116\001\002\000\004\062\105\001\002\000\004" +
    "\041\100\001\002\000\032\014\uffef\015\uffef\016\uffef\020" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\035\uffef\001\002\000\032\014\uffee\015\uffee\016" +
    "\uffee\020\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\035\uffee\001\002\000\004\015\027\001" +
    "\002\000\016\016\022\023\016\025\011\026\017\030\015" +
    "\035\026\001\002\000\032\014\ufff0\015\ufff0\016\ufff0\020" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\035\ufff0\001\002\000\032\014\ufff4\015\ufff4\016" +
    "\ufff4\020\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\035\ufff4\001\002\000\004\002\ufff5\001" +
    "\002\000\004\015\031\001\002\000\010\015\074\020\073" +
    "\031\072\001\002\000\010\026\032\066\036\067\034\001" +
    "\002\000\044\016\uffe7\023\uffe7\025\uffe7\026\uffe7\030\uffe7" +
    "\040\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\063\uffe7\001\002" +
    "\000\044\016\uffe8\023\uffe8\025\uffe8\026\uffe8\030\uffe8\040" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\063\uffe8\001\002\000" +
    "\044\016\uffe5\023\uffe5\025\uffe5\026\uffe5\030\uffe5\040\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\063\uffe5\001\002\000\016" +
    "\016\022\023\016\025\011\026\017\030\015\063\062\001" +
    "\002\000\044\016\uffe6\023\uffe6\025\uffe6\026\uffe6\030\uffe6" +
    "\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\063\uffe6\001\002" +
    "\000\044\016\uffeb\023\uffeb\025\uffeb\026\uffeb\030\uffeb\040" +
    "\uffeb\042\uffeb\043\uffeb\044\055\045\054\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\063\uffeb\001\002\000" +
    "\022\042\044\043\043\046\041\047\042\050\051\051\046" +
    "\052\050\053\047\001\002\000\010\026\uffe1\066\uffe1\067" +
    "\uffe1\001\002\000\010\026\uffe4\066\uffe4\067\uffe4\001\002" +
    "\000\010\026\032\066\036\067\034\001\002\000\010\026" +
    "\032\066\036\067\034\001\002\000\010\026\032\066\036" +
    "\067\034\001\002\000\010\026\uffe3\066\uffe3\067\uffe3\001" +
    "\002\000\010\026\uffe0\066\uffe0\067\uffe0\001\002\000\010" +
    "\026\uffdf\066\uffdf\067\uffdf\001\002\000\010\026\uffe2\066" +
    "\uffe2\067\uffe2\001\002\000\022\016\uffdb\023\uffdb\025\uffdb" +
    "\026\uffdb\030\uffdb\042\044\043\043\063\uffdb\001\002\000" +
    "\044\016\uffed\023\uffed\025\uffed\026\uffed\030\uffed\040\uffed" +
    "\042\uffed\043\uffed\044\055\045\054\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\063\uffed\001\002\000\010" +
    "\026\032\066\036\067\034\001\002\000\010\026\032\066" +
    "\036\067\034\001\002\000\044\016\uffea\023\uffea\025\uffea" +
    "\026\uffea\030\uffea\040\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\063\uffea\001\002\000\044\016\uffe9\023\uffe9\025\uffe9\026" +
    "\uffe9\030\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\063" +
    "\uffe9\001\002\000\044\016\uffec\023\uffec\025\uffec\026\uffec" +
    "\030\uffec\040\uffec\042\uffec\043\uffec\044\055\045\054\046" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\063\uffec" +
    "\001\002\000\022\015\uffd0\016\022\020\uffd0\023\016\025" +
    "\011\026\017\030\015\031\uffd0\001\002\000\006\054\064" +
    "\055\065\001\002\000\004\062\066\001\002\000\004\062" +
    "\uffde\001\002\000\004\062\uffdd\001\002\000\010\026\032" +
    "\066\036\067\034\001\002\000\022\042\044\043\043\046" +
    "\041\047\042\050\051\051\046\052\050\053\047\001\002" +
    "\000\010\026\032\066\036\067\034\001\002\000\022\016" +
    "\uffdc\023\uffdc\025\uffdc\026\uffdc\030\uffdc\042\044\043\043" +
    "\063\uffdc\001\002\000\014\016\022\023\016\025\011\026" +
    "\017\030\015\001\002\000\032\014\uffd3\015\uffd3\016\uffd3" +
    "\020\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\035\uffd3\001\002\000\010\026\032\066\036" +
    "\067\034\001\002\000\016\016\022\023\016\025\011\026" +
    "\017\030\015\063\062\001\002\000\022\015\uffd2\016\022" +
    "\020\uffd2\023\016\025\011\026\017\030\015\031\uffd2\001" +
    "\002\000\022\015\uffd1\016\022\020\uffd1\023\016\025\011" +
    "\026\017\030\015\031\uffd1\001\002\000\012\026\032\065" +
    "\101\066\036\067\034\001\002\000\004\040\104\001\002" +
    "\000\010\040\103\042\044\043\043\001\002\000\032\014" +
    "\uffd5\015\uffd5\016\uffd5\020\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\035\uffd5\001\002\000" +
    "\032\014\uffd4\015\uffd4\016\uffd4\020\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\035\uffd4\001" +
    "\002\000\010\026\032\066\036\067\034\001\002\000\004" +
    "\063\107\001\002\000\020\016\022\023\016\025\011\026" +
    "\017\030\015\054\064\055\065\001\002\000\020\014\111" +
    "\016\022\023\016\024\113\025\011\026\017\030\015\001" +
    "\002\000\014\016\022\023\016\025\011\026\017\030\015" +
    "\001\002\000\004\024\114\001\002\000\032\014\uffd9\015" +
    "\uffd9\016\uffd9\020\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\035\uffd9\001\002\000\032\014" +
    "\uffd8\015\uffd8\016\uffd8\020\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\035\uffd8\001\002\000" +
    "\016\016\022\023\016\024\uffda\025\011\026\017\030\015" +
    "\001\002\000\004\065\117\001\002\000\004\063\120\001" +
    "\002\000\004\040\121\001\002\000\032\014\uffd6\015\uffd6" +
    "\016\uffd6\020\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\035\uffd6\001\002\000\010\026\032" +
    "\066\036\067\034\001\002\000\004\063\124\001\002\000" +
    "\020\016\022\023\016\025\011\026\017\030\015\054\064" +
    "\055\065\001\002\000\016\016\022\023\016\025\011\026" +
    "\017\027\126\030\015\001\002\000\032\014\uffd7\015\uffd7" +
    "\016\uffd7\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\035\uffd7\001\002\000\004\002\uffff" +
    "\001\002\000\012\006\ufffc\007\ufffc\010\ufffc\033\ufffc\001" +
    "\002\000\004\064\140\001\002\000\012\006\135\007\133" +
    "\010\134\033\137\001\002\000\004\064\ufff7\001\002\000" +
    "\004\064\ufff8\001\002\000\004\064\ufff6\001\002\000\012" +
    "\006\ufffd\007\ufffd\010\ufffd\033\ufffd\001\002\000\004\034" +
    "\ufffe\001\002\000\004\026\141\001\002\000\006\037\ufff9" +
    "\040\ufff9\001\002\000\006\037\143\040\144\001\002\000" +
    "\004\026\145\001\002\000\012\006\ufffb\007\ufffb\010\ufffb" +
    "\033\ufffb\001\002\000\006\037\ufffa\040\ufffa\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\010\002\003\004\006\010\005\001\001\000" +
    "\002\001\001\000\010\003\130\005\131\006\127\001\001" +
    "\000\002\001\001\000\004\010\126\001\001\000\020\011" +
    "\022\017\013\020\023\022\017\023\012\024\011\025\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\024\020\023\022\017\023\012" +
    "\024\011\025\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\027\001\001\000\002" +
    "\001\001\000\012\012\037\013\036\014\032\015\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\060\017\013\020\023\022\017\023\012\024" +
    "\011\025\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\057\014\032\001\001\000\006\013\052" +
    "\014\032\001\001\000\010\012\051\013\036\014\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\056\001\001\000\004\014\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\024\020\023\022\017\023\012\024\011\025\020\001\001" +
    "\000\004\027\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\066\013\036\014\032" +
    "\001\001\000\004\016\067\001\001\000\010\012\070\013" +
    "\036\014\032\001\001\000\002\001\001\000\020\011\076" +
    "\017\013\020\023\022\017\023\012\024\011\025\020\001" +
    "\001\000\002\001\001\000\012\012\037\013\036\014\032" +
    "\015\074\001\001\000\020\011\075\017\013\020\023\022" +
    "\017\023\012\024\011\025\020\001\001\000\016\017\024" +
    "\020\023\022\017\023\012\024\011\025\020\001\001\000" +
    "\016\017\024\020\023\022\017\023\012\024\011\025\020" +
    "\001\001\000\010\012\101\013\036\014\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\037\013\036\014\032\015\105\001" +
    "\001\000\002\001\001\000\022\011\107\017\013\020\023" +
    "\022\017\023\012\024\011\025\020\027\062\001\001\000" +
    "\020\017\024\020\023\021\111\022\017\023\012\024\011" +
    "\025\020\001\001\000\020\011\114\017\013\020\023\022" +
    "\017\023\012\024\011\025\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\024\020" +
    "\023\022\017\023\012\024\011\025\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\037\013\036\014\032\015\122\001\001" +
    "\000\002\001\001\000\022\011\124\017\013\020\023\022" +
    "\017\023\012\024\011\025\020\027\062\001\001\000\016" +
    "\017\024\020\023\022\017\023\012\024\011\025\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\130\006\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + s + " no reconocido. valor " + s.value );
    }

    
 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


    public Object resultado="";



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pgm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgm ::= bloque_sentencias 
            {
              Object RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object bs = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[0]= NUEVO PROGRAMA SIN VARIABLES");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pgm",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pgm ::= bloque_declaraciones_variables bloque_sentencias 
            {
              Object RESULT =null;
		int bdvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bdvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object bdv = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object bs = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[1]= NUEVO PROGRAMA CON VARIABLES");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pgm",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_declaraciones_variables ::= DECLARESECTION lista_declaraciones_variables ENDDECLARESECTION 
            {
              Object RESULT =null;
		System.out.println("[REGLA[2]= BLOQUE DE DECLARACIÓN DE VARIABLES"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_declaraciones_variables",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_declaraciones_variables ::= lista_declaraciones_variables declaracion_variables 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("REGLA[3]= DECLARACIÓN DE CONJUNTO DE VARIABLES"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_declaraciones_variables",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones_variables ::= declaracion_variables 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("REGLA[4]= DECLARACION DE VARIABLES"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_declaraciones_variables",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_variables ::= tipo DOS_PUNTOS lista_variables FIN_INSTRUCCION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		System.out.println("REGLA[5]= LISTA DE VARIABLES"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_variables ::= lista_variables COMA ID 
            {
              Object RESULT =null;
		System.out.println("REGLA[6]= CONJUNTO DE VARIABLES MAS VARIABLE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_variables ::= ID 
            {
              Object RESULT =null;
		System.out.println("REGLA[7]= VARIABLE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= TIPO_INT 
            {
              Object RESULT =null;
		System.out.println("REGLA[8]= TIPO INT"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= TIPO_STRING 
            {
              Object RESULT =null;
		System.out.println("REGLA[9]= TIPO STRING"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= TIPO_REAL 
            {
              Object RESULT =null;
		System.out.println("REGLA[10]= TIPO REAL"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloque_sentencias ::= PROGRAMSECTION sentencias ENDPROGRAMSECTION 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("[REGLA[3]= BLOQUE DE DECLARACIÓN DE SENTENCIAS"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= salida_pantalla 
            {
              Object RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object sa = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= switch 
            {
              Object RESULT =null;
		int swileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int swiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object swi = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion OP_SUMA termino 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[11]=SUMAR UNA EXPRESION Y UN TERMINO"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion OP_RESTA termino 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[12]=RESTAR UNA EXPRESION Y UN TERMINO"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= termino 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 resultado = a; System.out.println("REGLA[12]=RESULTADO DE LA EXPRESION");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // termino ::= termino OP_MULTIPLICACION factor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[13]=MULTIPLICACION TERMINO POR FACTOR");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termino ::= termino OP_DIVISION factor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[14]=DIVISION TERMINO POR FACTOR");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termino ::= factor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 resultado = a; System.out.println("REGLA[15]=RESULTADO DE LA OPERACION");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // factor ::= ID 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[16]=VARIABLE");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= CONST_INT 
            {
              Object RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cte = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[17]=CONSTANTE");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= CONST_REAL 
            {
              Object RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cte = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[17]=CONSTANTE");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparacion ::= OP_DISTINTO 
            {
              Object RESULT =null;
		System.out.println("REGLA[18]= OPERADOR DISTINTO"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparacion ::= OP_MENOR 
            {
              Object RESULT =null;
		System.out.println("REGLA[19]= OPERADOR MENOR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparacion ::= OP_MAYOR 
            {
              Object RESULT =null;
		System.out.println("REGLA[20]= OPERADOR MAYOR"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparacion ::= OP_IGUAL 
            {
              Object RESULT =null;
		System.out.println("REGLA[21]= OPERADOR IGUAL"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparacion ::= OP_MENOR_IGUAL 
            {
              Object RESULT =null;
		System.out.println("REGLA[22]= OPERADOR MENOR O IGUAL"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= OP_MAYOR_IGUAL 
            {
              Object RESULT =null;
		System.out.println("REGLA[23]= OPERADOR MAYOR O IGUAL"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_logico ::= AND 
            {
              Object RESULT =null;
		System.out.println("REGLA[]= OPERARDOR AND");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("op_logico",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_logico ::= OR 
            {
              Object RESULT =null;
		System.out.println("REGLA[]= OPERARDOR OR");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("op_logico",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= condicion PARENTESIS_CIERRA op_logico PARENTESIS_ABRE expresion comparacion expresion 
            {
              Object RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object cd = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object bb = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("REGLA[24]= COMPARACION DE EXPRESIONES DOBLE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= expresion comparacion expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("REGLA[24]= COMPARACION DE EXPRESIONES"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentenciaElse ::= ELSE sentencias 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println("REGLA[28]= SENTENCIA ELSE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentenciaIf ::= IF PARENTESIS_ABRE condicion PARENTESIS_CIERRA sentencias ENDIF 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("REGLA[26]= SENTENCIA IF"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaIf",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentenciaIf ::= IF PARENTESIS_ABRE condicion PARENTESIS_CIERRA sentencias sentenciaElse ENDIF 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("REGLA[27]= SENTENCIA IF ELSE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaIf",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentenciaWhile ::= WHILE PARENTESIS_ABRE condicion PARENTESIS_CIERRA sentencias ENDWHILE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("REGLA[28]= SENTENCIA WHILE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // salida_pantalla ::= DISPLAY PARENTESIS_ABRE CONST_STRING PARENTESIS_CIERRA FIN_INSTRUCCION 
            {
              Object RESULT =null;
		System.out.println("REGLA[29]= SALIDA EN PANTALLA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida_pantalla",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentenciaAsignacion ::= ID OP_ASIGNACION expresion FIN_INSTRUCCION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("REGLA[30]= ASIGNACION DE UNA EXPRESION A UN ID");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentenciaAsignacion ::= ID OP_ASIGNACION CONST_STRING FIN_INSTRUCCION 
            {
              Object RESULT =null;
		 System.out.println("REGLA[30]= ASIGNACION DE UNA CONSTANTE STRING A UN ID");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // switch ::= DO CASE casos ENDCASE 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("REGLA[32]= CASE"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("switch",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // casos ::= casos CASE condicion sentencias 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[33]= CASO MAS CASOS"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // casos ::= casos OTHER sentencias 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[33]= OTHER MAS CASOS"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // casos ::= CASE condicion sentencias 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("REGLA[36]= CASO UNICO"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
