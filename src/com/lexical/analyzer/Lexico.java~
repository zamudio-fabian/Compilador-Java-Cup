/* The following code was generated by JFlex 1.7.0 */

package com.lexical.analyzer;
import com.lexical.analyzer.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Compilador-TEO1/Compilador/src/com/lexical/analyzer/Lexico.flex</tt>
 */
class Lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\4\1\75\1\5\1\4\22\0\1\4\1\14\1\21"+
    "\5\0\1\73\1\74\1\11\1\6\1\16\1\7\1\3\1\10\12\2"+
    "\1\17\1\20\1\13\1\15\1\12\2\0\1\42\1\1\1\41\1\45"+
    "\1\44\1\1\1\65\1\52\1\63\2\1\1\62\1\66\1\54\1\46"+
    "\1\64\1\1\1\53\1\43\1\51\6\1\1\71\1\0\1\72\1\0"+
    "\1\1\1\0\1\36\1\47\1\61\1\32\1\33\1\34\1\31\1\57"+
    "\1\55\1\1\1\50\1\26\1\1\1\30\1\27\2\1\1\37\1\40"+
    "\1\60\1\1\1\35\1\56\3\1\1\67\1\0\1\70\7\0\1\75"+
    "\33\0\1\23\17\0\1\25\20\0\1\22\1\24\u1f54\0\1\25\17\0"+
    "\1\75\1\75\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\1\1\13\1\14\1\15\1\1"+
    "\16\2\1\16\1\17\1\20\1\21\1\22\1\23\2\0"+
    "\1\24\1\25\1\26\1\27\1\30\1\0\1\31\2\0"+
    "\2\2\1\32\11\2\1\33\4\2\1\34\1\0\5\2"+
    "\1\35\11\2\1\36\2\2\1\37\5\2\1\40\11\2"+
    "\1\41\3\2\1\42\6\2\1\43\1\44\1\45\1\2"+
    "\1\46\1\47\1\50\10\2\1\51\4\2\1\52\2\2"+
    "\2\0\2\2\2\0\2\2\24\0\1\53\1\54\4\0"+
    "\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\76\0\76\0\370\0\76"+
    "\0\76\0\u0136\0\u0174\0\u01b2\0\u01f0\0\76\0\u022e\0\76"+
    "\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e"+
    "\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\u060e\0\u064c\0\76"+
    "\0\76\0\76\0\76\0\76\0\u026c\0\76\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\174\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\174\0\u09b0\0\u09ee\0\u0a2c"+
    "\0\u0a6a\0\u060e\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\174\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0dce\0\u0e0c\0\174\0\u0e4a\0\u0e88\0\174\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\174\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\174\0\u122a\0\u1268"+
    "\0\u12a6\0\174\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a"+
    "\0\174\0\174\0\174\0\u1458\0\174\0\174\0\174\0\u1496"+
    "\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\174"+
    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\174\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea"+
    "\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda"+
    "\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\76\0\76\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\76\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\0\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\4\2\1\22\1\23\2\3\1\24\1\25"+
    "\1\26\4\3\1\27\2\3\1\30\1\31\1\32\1\33"+
    "\5\3\1\34\1\35\2\3\1\36\2\3\1\37\2\3"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\100\0\2\3"+
    "\23\0\41\3\11\0\1\4\1\46\102\0\1\47\102\0"+
    "\1\50\75\0\1\51\75\0\1\52\75\0\1\53\75\0"+
    "\1\54\61\0\20\55\1\56\1\57\1\0\1\60\1\0"+
    "\41\55\10\0\2\3\23\0\1\3\1\61\37\3\10\0"+
    "\2\3\23\0\32\3\1\62\6\3\10\0\2\3\23\0"+
    "\1\3\1\63\3\3\1\64\33\3\10\0\2\3\23\0"+
    "\1\65\1\3\1\66\36\3\10\0\2\3\23\0\1\3"+
    "\1\67\37\3\10\0\2\3\23\0\14\3\1\70\24\3"+
    "\10\0\2\3\23\0\26\3\1\71\12\3\10\0\2\3"+
    "\23\0\16\3\1\72\1\3\1\63\20\3\10\0\2\3"+
    "\23\0\23\3\1\73\15\3\10\0\2\3\23\0\11\3"+
    "\1\74\27\3\10\0\2\3\23\0\6\3\1\75\32\3"+
    "\10\0\2\3\23\0\11\3\1\76\17\3\1\77\7\3"+
    "\10\0\2\3\23\0\10\3\1\100\30\3\10\0\2\3"+
    "\23\0\25\3\1\101\13\3\11\0\1\102\73\0\10\47"+
    "\1\103\65\47\23\0\1\55\77\0\1\55\51\0\2\3"+
    "\23\0\2\3\1\104\36\3\10\0\2\3\23\0\31\3"+
    "\1\105\7\3\10\0\2\3\23\0\6\3\1\106\32\3"+
    "\10\0\2\3\23\0\12\3\1\107\26\3\10\0\2\3"+
    "\23\0\4\3\1\110\34\3\10\0\2\3\23\0\11\3"+
    "\1\111\27\3\10\0\2\3\23\0\15\3\1\112\23\3"+
    "\10\0\2\3\23\0\17\3\1\113\21\3\10\0\2\3"+
    "\23\0\13\3\1\114\25\3\10\0\2\3\23\0\24\3"+
    "\1\115\14\3\10\0\2\3\23\0\5\3\1\116\33\3"+
    "\10\0\2\3\23\0\27\3\1\117\11\3\10\0\2\3"+
    "\23\0\27\3\1\120\11\3\10\0\2\3\23\0\12\3"+
    "\1\121\26\3\10\0\2\3\23\0\20\3\1\122\20\3"+
    "\7\0\7\47\1\5\1\103\65\47\1\0\2\3\23\0"+
    "\3\3\1\123\35\3\10\0\2\3\23\0\5\3\1\124"+
    "\33\3\10\0\2\3\23\0\7\3\1\125\31\3\10\0"+
    "\2\3\23\0\5\3\1\126\33\3\10\0\2\3\23\0"+
    "\4\3\1\127\1\3\1\130\20\3\1\131\1\132\2\3"+
    "\1\133\5\3\10\0\2\3\23\0\16\3\1\134\22\3"+
    "\10\0\2\3\23\0\13\3\1\135\3\3\1\136\16\3"+
    "\1\137\2\3\10\0\2\3\23\0\34\3\1\140\4\3"+
    "\10\0\2\3\23\0\16\3\1\141\22\3\10\0\2\3"+
    "\23\0\10\3\1\142\30\3\10\0\2\3\23\0\32\3"+
    "\1\143\6\3\10\0\2\3\23\0\1\144\40\3\10\0"+
    "\2\3\23\0\5\3\1\134\33\3\10\0\2\3\23\0"+
    "\37\3\1\145\1\3\10\0\2\3\23\0\11\3\1\146"+
    "\27\3\10\0\2\3\23\0\10\3\1\147\30\3\10\0"+
    "\2\3\23\0\5\3\1\150\33\3\10\0\2\3\23\0"+
    "\1\3\1\151\37\3\10\0\2\3\23\0\6\3\1\152"+
    "\32\3\10\0\2\3\23\0\31\3\1\153\7\3\10\0"+
    "\2\3\23\0\10\3\1\154\30\3\10\0\2\3\23\0"+
    "\14\3\1\155\24\3\10\0\2\3\23\0\16\3\1\156"+
    "\22\3\10\0\2\3\23\0\25\3\1\157\13\3\10\0"+
    "\2\3\23\0\14\3\1\160\24\3\10\0\2\3\23\0"+
    "\25\3\1\146\13\3\10\0\2\3\23\0\22\3\1\161"+
    "\16\3\10\0\2\3\23\0\5\3\1\162\33\3\10\0"+
    "\2\3\23\0\5\3\1\163\33\3\10\0\2\3\23\0"+
    "\25\3\1\164\13\3\10\0\2\3\23\0\11\3\1\165"+
    "\27\3\10\0\2\3\23\0\6\3\1\166\32\3\10\0"+
    "\2\3\23\0\11\3\1\167\27\3\10\0\2\3\23\0"+
    "\27\3\1\170\11\3\10\0\2\3\23\0\12\3\1\171"+
    "\26\3\10\0\2\3\23\0\15\3\1\172\23\3\10\0"+
    "\2\3\23\0\13\3\1\173\25\3\10\0\2\3\23\0"+
    "\20\3\1\174\20\3\10\0\2\3\23\0\25\3\1\175"+
    "\13\3\10\0\2\3\23\0\14\3\1\176\24\3\10\0"+
    "\2\3\23\0\1\177\40\3\10\0\2\3\23\0\5\3"+
    "\1\200\33\3\10\0\2\3\23\0\16\3\1\200\22\3"+
    "\10\0\2\3\23\0\34\3\1\201\4\3\10\0\2\3"+
    "\23\0\37\3\1\202\1\3\10\0\2\3\23\0\16\3"+
    "\1\203\22\3\10\0\2\3\23\0\40\3\1\204\10\0"+
    "\2\3\23\0\5\3\1\205\33\3\10\0\2\3\23\0"+
    "\14\3\1\206\24\3\10\0\2\3\23\0\25\3\1\207"+
    "\13\3\10\0\2\3\1\210\22\0\41\3\10\0\2\3"+
    "\1\211\22\0\41\3\10\0\2\3\23\0\25\3\1\212"+
    "\13\3\10\0\2\3\23\0\14\3\1\213\24\3\52\0"+
    "\1\214\75\0\1\215\33\0\2\3\23\0\16\3\1\216"+
    "\22\3\10\0\2\3\23\0\40\3\1\217\53\0\1\220"+
    "\75\0\1\221\32\0\2\3\1\222\22\0\41\3\10\0"+
    "\2\3\1\223\22\0\41\3\50\0\1\224\75\0\1\225"+
    "\77\0\1\226\75\0\1\227\103\0\1\230\75\0\1\231"+
    "\70\0\1\232\75\0\1\233\114\0\1\234\75\0\1\235"+
    "\53\0\1\236\75\0\1\237\102\0\1\240\75\0\1\241"+
    "\100\0\1\242\75\0\1\243\100\0\1\244\75\0\1\245"+
    "\104\0\1\246\75\0\1\247\60\0\1\250\75\0\1\251"+
    "\103\0\1\252\75\0\1\253\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8122];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\2\11\4\1\1\11"+
    "\1\1\1\11\17\1\6\11\2\0\5\11\1\0\1\11"+
    "\2\0\22\1\1\0\104\1\2\0\2\1\2\0\2\1"+
    "\24\0\2\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public boolean hasError = false;
public String errorMessage = "";
public int errorLine = 0;
public int errorColumn = 0;

private TablaSimbolo miTabla = new TablaSimbolo(); 

public void addReal( String value){	
    boolean response = miTabla.addReal( value);
    if(!response) makeError("Real format not allowed");
}

public void addString( String value) {
    boolean response = miTabla.addString(value);
    if(!response) makeError("String format not allowed");
}

public void addId( String value) {
    boolean response = miTabla.addId(value);
    if(!response) makeError("ID format not allowed");
}

public void addInt(String value) {
    boolean response = miTabla.addInt(value);
    if(!response) makeError("Integer format not allowed");
}

public void makeError(String error) {
    hasError = true;
    errorMessage = error;
    errorLine = yyline + 1;
    errorColumn = yycolumn + 1;
}

public void save(){
    miTabla.save();
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { makeError("Simbol not defined");return Tokens.ERROR;
            } 
            // fall through
          case 47: break;
          case 2: 
            { addId(yytext());return Tokens.ID;
            } 
            // fall through
          case 48: break;
          case 3: 
            { addInt(yytext()); return Tokens.CONST_INT;
            } 
            // fall through
          case 49: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 50: break;
          case 5: 
            { return Tokens.OP_SUMA;
            } 
            // fall through
          case 51: break;
          case 6: 
            { return Tokens.OP_RESTA;
            } 
            // fall through
          case 52: break;
          case 7: 
            { return Tokens.OP_DIVISION;
            } 
            // fall through
          case 53: break;
          case 8: 
            { return Tokens.OP_MULTIPLICACION;
            } 
            // fall through
          case 54: break;
          case 9: 
            { return Tokens.OP_MAYOR;
            } 
            // fall through
          case 55: break;
          case 10: 
            { return Tokens.OP_MENOR;
            } 
            // fall through
          case 56: break;
          case 11: 
            { return Tokens.COMA;
            } 
            // fall through
          case 57: break;
          case 12: 
            { return Tokens.DOS_PUNTOS;
            } 
            // fall through
          case 58: break;
          case 13: 
            { return Tokens.FIN_INSTRUCCION;
            } 
            // fall through
          case 59: break;
          case 14: 
            { return Tokens.BLOQUE_ABRE;
            } 
            // fall through
          case 60: break;
          case 15: 
            { return Tokens.BLOQUE_CIERRA;
            } 
            // fall through
          case 61: break;
          case 16: 
            { return Tokens.CORCHETE_ABRE;
            } 
            // fall through
          case 62: break;
          case 17: 
            { return Tokens.CORCHETE_CIERRA;
            } 
            // fall through
          case 63: break;
          case 18: 
            { return Tokens.PARENTESIS_ABRE;
            } 
            // fall through
          case 64: break;
          case 19: 
            { return Tokens.PARENTESIS_CIERRA;
            } 
            // fall through
          case 65: break;
          case 20: 
            { return Tokens.OP_MAYOR_IGUAL;
            } 
            // fall through
          case 66: break;
          case 21: 
            { return Tokens.OP_MENOR_IGUAL;
            } 
            // fall through
          case 67: break;
          case 22: 
            { return Tokens.OP_DISTINTO;
            } 
            // fall through
          case 68: break;
          case 23: 
            { return Tokens.OP_IGUAL;
            } 
            // fall through
          case 69: break;
          case 24: 
            { return Tokens.OP_ASIGNACION;
            } 
            // fall through
          case 70: break;
          case 25: 
            { addString(yytext()); return Tokens.CONST_STRING;
            } 
            // fall through
          case 71: break;
          case 26: 
            { return Tokens.DO;
            } 
            // fall through
          case 72: break;
          case 27: 
            { return Tokens.IF;
            } 
            // fall through
          case 73: break;
          case 28: 
            { addReal(yytext()); return Tokens.CONST_REAL;
            } 
            // fall through
          case 74: break;
          case 29: 
            { return Tokens.FOR;
            } 
            // fall through
          case 75: break;
          case 30: 
            { return Tokens.LONG;
            } 
            // fall through
          case 76: break;
          case 31: 
            { return Tokens.ELSE;
            } 
            // fall through
          case 77: break;
          case 32: 
            { return Tokens.CASE;
            } 
            // fall through
          case 78: break;
          case 33: 
            { return Tokens.OTHER;
            } 
            // fall through
          case 79: break;
          case 34: 
            { return Tokens.ENDIF;
            } 
            // fall through
          case 80: break;
          case 35: 
            { return Tokens.BREAK;
            } 
            // fall through
          case 81: break;
          case 36: 
            { return Tokens.WRITE;
            } 
            // fall through
          case 82: break;
          case 37: 
            { return Tokens.WHILE;
            } 
            // fall through
          case 83: break;
          case 38: 
            { return Tokens.DEFVAR;
            } 
            // fall through
          case 84: break;
          case 39: 
            { return Tokens.ENDDEF;
            } 
            // fall through
          case 85: break;
          case 40: 
            { return Tokens.ENDFOR;
            } 
            // fall through
          case 86: break;
          case 41: 
            { return Tokens.ENDCASE;
            } 
            // fall through
          case 87: break;
          case 42: 
            { return Tokens.ENDWHILE;
            } 
            // fall through
          case 88: break;
          case 43: 
            { return Tokens.DECLARESECTION;
            } 
            // fall through
          case 89: break;
          case 44: 
            { return Tokens.PROGRAMSECTION;
            } 
            // fall through
          case 90: break;
          case 45: 
            { return Tokens.ENDDECLARESECTION;
            } 
            // fall through
          case 91: break;
          case 46: 
            { return Tokens.ENDPROGRAMSECTION;
            } 
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
