/* The following code was generated by JFlex 1.7.0 */

////////////////////////////////////////////////
// IMPORTS
////////////////////////////////////////////////
package com.lexical.analyzer;
import java_cup.runtime.*;
import java.util.LinkedList;


////////////////////////////////////////////////
// CONFIGS
////////////////////////////////////////////////

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIOANIDADO = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\5\1\64\1\6\1\5\22\0\1\5\1\15\1\22"+
    "\3\0\1\54\1\0\1\62\1\63\1\12\1\7\1\17\1\10\1\4"+
    "\1\11\12\3\1\20\1\21\1\14\1\16\1\13\2\0\1\31\1\45"+
    "\1\44\1\41\1\30\1\42\1\37\1\47\1\35\1\1\1\46\1\32"+
    "\1\53\1\36\1\40\1\51\1\1\1\27\1\33\1\34\1\1\1\43"+
    "\1\50\1\1\1\52\1\1\1\60\1\0\1\61\1\0\1\2\1\0"+
    "\32\1\1\56\1\55\1\57\7\0\1\64\33\0\1\24\17\0\1\26"+
    "\20\0\1\23\1\25\u1f54\0\1\26\17\0\1\64\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\1\1\12\1\13\1\14\1\1"+
    "\14\2\2\1\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\3\23\2\0\1\24\1\25\1\26\1\27\1\30\1\0"+
    "\1\31\2\0\6\2\1\32\3\2\1\33\6\2\1\34"+
    "\1\35\1\36\1\37\1\0\5\2\1\40\4\2\1\41"+
    "\5\2\1\42\1\43\6\2\1\44\5\2\1\45\4\2"+
    "\1\46\6\2\1\47\3\2\1\50\1\51\1\52\1\2"+
    "\1\53\1\2\1\54\3\2\1\55\1\56\4\2\1\57"+
    "\3\2\1\60\2\2\1\61\1\2\2\0\2\2\2\0"+
    "\2\2\24\0\1\62\1\63\4\0\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\152\0\u013e"+
    "\0\152\0\152\0\u0173\0\u01a8\0\u01dd\0\u0212\0\152\0\u0247"+
    "\0\152\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba"+
    "\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\u0597\0\u05cc"+
    "\0\152\0\u0601\0\u0636\0\152\0\152\0\152\0\152\0\152"+
    "\0\u027c\0\152\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\237\0\u0813\0\u0848\0\u087d\0\237\0\u08b2"+
    "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\152\0\152\0\u0597"+
    "\0\u0601\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\237"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\237\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\237\0\237\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\237\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d"+
    "\0\237\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\237\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u112f\0\237\0\u1164\0\u1199\0\u11ce"+
    "\0\237\0\237\0\237\0\u1203\0\237\0\u1238\0\237\0\u126d"+
    "\0\u12a2\0\u12d7\0\237\0\237\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\237\0\u13e0\0\u1415\0\u144a\0\237\0\u147f\0\u14b4\0\237"+
    "\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\152\0\152\0\u1aea"+
    "\0\u1b1f\0\u1b54\0\u1b89\0\152\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\3\1\0\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\4\3\1\23\1\24\1\4\1\25\1\26"+
    "\1\4\1\27\2\4\1\30\1\31\1\32\1\4\1\33"+
    "\1\34\2\4\1\35\1\36\2\4\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\0\11\47\1\50"+
    "\1\51\47\47\2\51\1\47\66\0\3\4\23\0\25\4"+
    "\12\0\1\4\25\0\25\4\14\0\1\6\1\52\71\0"+
    "\1\53\71\0\1\54\64\0\1\55\64\0\1\56\64\0"+
    "\1\57\64\0\1\60\47\0\1\61\1\0\17\61\1\62"+
    "\1\63\1\0\1\64\1\0\25\61\12\0\3\4\23\0"+
    "\1\4\1\65\23\4\12\0\3\4\23\0\3\4\1\66"+
    "\3\4\1\67\15\4\12\0\3\4\23\0\11\4\1\70"+
    "\13\4\12\0\3\4\23\0\5\4\1\71\17\4\12\0"+
    "\3\4\23\0\7\4\1\72\3\4\1\73\11\4\12\0"+
    "\3\4\23\0\5\4\1\74\17\4\12\0\3\4\23\0"+
    "\1\4\1\75\4\4\1\76\2\4\1\77\13\4\12\0"+
    "\3\4\23\0\11\4\1\100\13\4\12\0\3\4\23\0"+
    "\2\4\1\101\22\4\12\0\3\4\23\0\1\102\24\4"+
    "\12\0\3\4\23\0\1\103\17\4\1\104\4\4\12\0"+
    "\3\4\23\0\1\105\24\4\65\0\1\106\65\0\1\107"+
    "\7\0\12\47\1\0\47\47\2\0\11\47\1\110\1\47"+
    "\1\0\47\47\2\0\1\47\3\0\1\111\61\0\11\53"+
    "\1\112\53\53\24\0\1\61\66\0\1\61\37\0\3\4"+
    "\23\0\2\4\1\113\22\4\12\0\3\4\23\0\4\4"+
    "\1\114\20\4\12\0\3\4\23\0\12\4\1\115\12\4"+
    "\12\0\3\4\23\0\7\4\1\116\15\4\12\0\3\4"+
    "\23\0\1\117\24\4\12\0\3\4\23\0\5\4\1\120"+
    "\17\4\12\0\3\4\23\0\20\4\1\121\4\4\12\0"+
    "\3\4\23\0\13\4\1\122\1\4\1\123\7\4\12\0"+
    "\3\4\23\0\4\4\1\124\20\4\12\0\3\4\23\0"+
    "\1\125\24\4\12\0\3\4\23\0\4\4\1\126\20\4"+
    "\12\0\3\4\23\0\1\4\1\127\23\4\12\0\3\4"+
    "\23\0\6\4\1\130\16\4\12\0\3\4\23\0\6\4"+
    "\1\131\16\4\12\0\3\4\23\0\11\4\1\132\13\4"+
    "\11\0\10\53\1\3\1\112\53\53\1\0\3\4\23\0"+
    "\3\4\1\133\21\4\12\0\3\4\23\0\1\4\1\134"+
    "\23\4\12\0\3\4\23\0\6\4\1\135\3\4\1\136"+
    "\1\137\1\4\1\140\3\4\1\141\1\142\2\4\12\0"+
    "\3\4\23\0\10\4\1\143\14\4\12\0\3\4\23\0"+
    "\6\4\1\144\16\4\12\0\3\4\23\0\1\4\1\145"+
    "\23\4\12\0\3\4\23\0\14\4\1\146\10\4\12\0"+
    "\3\4\23\0\3\4\1\147\21\4\12\0\3\4\23\0"+
    "\22\4\1\150\2\4\12\0\3\4\23\0\1\4\1\151"+
    "\23\4\12\0\3\4\23\0\2\4\1\152\22\4\12\0"+
    "\3\4\23\0\5\4\1\153\17\4\12\0\3\4\23\0"+
    "\3\4\1\154\21\4\12\0\3\4\23\0\10\4\1\155"+
    "\14\4\12\0\3\4\23\0\13\4\1\156\11\4\12\0"+
    "\3\4\23\0\1\4\1\157\23\4\12\0\3\4\23\0"+
    "\11\4\1\160\13\4\12\0\3\4\23\0\2\4\1\161"+
    "\22\4\12\0\3\4\23\0\20\4\1\162\4\4\12\0"+
    "\3\4\23\0\1\163\24\4\12\0\3\4\23\0\7\4"+
    "\1\164\15\4\12\0\3\4\23\0\1\165\24\4\12\0"+
    "\3\4\23\0\2\4\1\166\22\4\12\0\3\4\23\0"+
    "\2\4\1\167\22\4\12\0\3\4\23\0\3\4\1\170"+
    "\21\4\12\0\3\4\23\0\17\4\1\171\5\4\12\0"+
    "\3\4\23\0\1\4\1\172\23\4\12\0\3\4\23\0"+
    "\1\4\1\173\23\4\12\0\3\4\23\0\1\174\24\4"+
    "\12\0\3\4\23\0\13\4\1\175\1\4\1\176\7\4"+
    "\12\0\3\4\23\0\1\177\24\4\12\0\3\4\23\0"+
    "\4\4\1\200\20\4\12\0\3\4\23\0\6\4\1\201"+
    "\16\4\12\0\3\4\23\0\11\4\1\202\13\4\12\0"+
    "\3\4\23\0\10\4\1\203\14\4\12\0\3\4\23\0"+
    "\1\204\24\4\12\0\3\4\23\0\1\205\24\4\12\0"+
    "\3\4\23\0\2\4\1\206\22\4\12\0\3\4\23\0"+
    "\2\4\1\207\22\4\12\0\3\4\23\0\3\4\1\210"+
    "\21\4\12\0\3\4\23\0\1\4\1\211\23\4\12\0"+
    "\3\4\23\0\3\4\1\212\21\4\12\0\3\4\23\0"+
    "\10\4\1\213\14\4\12\0\3\4\23\0\1\4\1\214"+
    "\23\4\12\0\3\4\23\0\23\4\1\215\1\4\12\0"+
    "\3\4\23\0\24\4\1\216\12\0\3\4\23\0\2\4"+
    "\1\217\22\4\12\0\3\4\23\0\1\4\1\220\23\4"+
    "\12\0\3\4\23\0\1\221\24\4\12\0\3\4\1\222"+
    "\22\0\25\4\12\0\3\4\1\223\22\0\25\4\12\0"+
    "\3\4\23\0\1\224\24\4\12\0\3\4\23\0\2\4"+
    "\1\225\22\4\44\0\1\226\64\0\1\227\32\0\3\4"+
    "\23\0\1\4\1\230\23\4\12\0\3\4\23\0\24\4"+
    "\1\231\41\0\1\232\64\0\1\233\35\0\3\4\1\234"+
    "\22\0\25\4\12\0\3\4\1\235\22\0\25\4\55\0"+
    "\1\236\64\0\1\237\53\0\1\240\64\0\1\241\65\0"+
    "\1\242\64\0\1\243\60\0\1\244\64\0\1\245\71\0"+
    "\1\246\64\0\1\247\73\0\1\250\64\0\1\251\60\0"+
    "\1\252\64\0\1\253\60\0\1\254\64\0\1\255\66\0"+
    "\1\256\64\0\1\257\63\0\1\260\64\0\1\261\67\0"+
    "\1\262\64\0\1\263\62\0\1\264\64\0\1\265\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7102];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\1\1\2\11\4\1\1\11"+
    "\1\1\1\11\17\1\6\11\2\1\1\11\2\0\5\11"+
    "\1\0\1\11\2\0\21\1\2\11\2\1\1\0\107\1"+
    "\2\0\2\1\2\0\2\1\24\0\2\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public String last_type = "";
public boolean hasError = false;
public String errorMessage = "";
public int errorLine = 0;
public int errorColumn = 0;
public static LinkedList<LexicalError> LexicalErrorList = new LinkedList<LexicalError>();
public static TablaSimbolo SymbolTable = new TablaSimbolo(); 

public void addReal( String value){	
    boolean isOk = SymbolTable.addReal( value);
    if(!isOk) makeError("Real out of range");
}

public void addString( String value) {
    boolean isOk = SymbolTable.addString(value);
    if(!isOk) makeError("String out of range");
}

public void addId( String value) {
    boolean isOk = SymbolTable.addId(value, last_type);
    if(!isOk) makeError("ID out of range");
}

public void addInt(String value) {
    boolean isOk = SymbolTable.addInt(value);
    if(!isOk) makeError("Integer out of range");
}

public void makeError(String error) {
    hasError = true;    
    LexicalError lexicalError = new LexicalError(yytext(), "Error léxico", error, yyline + 1,yycolumn + 1);
    LexicalErrorList.add(lexicalError);
}

private final LinkedList<Integer> states = new LinkedList();

private void yypushstate(int state) {
    states.addFirst(yystate());
    yybegin(state);
}
private void yypopstate() {
    final int state = states.removeFirst();
    yybegin(state);
}

public void save(){
    SymbolTable.save();
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Ignore*/
            } 
            // fall through
          case 54: break;
          case 2: 
            { addId(yytext()); return new Symbol(sym.ID, yycolumn, yyline ,new String(yytext()));
            } 
            // fall through
          case 55: break;
          case 3: 
            { addInt(yytext()); return new Symbol(sym.CONST_INT, yycolumn, yyline ,new String(yytext()));
            } 
            // fall through
          case 56: break;
          case 4: 
            { return new Symbol(sym.OP_SUMA, yycolumn, yyline);
            } 
            // fall through
          case 57: break;
          case 5: 
            { return new Symbol(sym.OP_RESTA, yycolumn, yyline);
            } 
            // fall through
          case 58: break;
          case 6: 
            { return new Symbol(sym.OP_DIVISION, yycolumn, yyline);
            } 
            // fall through
          case 59: break;
          case 7: 
            { return new Symbol(sym.OP_MULTIPLICACION, yycolumn, yyline);
            } 
            // fall through
          case 60: break;
          case 8: 
            { return new Symbol(sym.OP_MAYOR, yycolumn, yyline);
            } 
            // fall through
          case 61: break;
          case 9: 
            { return new Symbol(sym.OP_MENOR, yycolumn, yyline);
            } 
            // fall through
          case 62: break;
          case 10: 
            { return new Symbol(sym.COMA, yycolumn, yyline);
            } 
            // fall through
          case 63: break;
          case 11: 
            { return new Symbol(sym.DOS_PUNTOS, yycolumn, yyline);
            } 
            // fall through
          case 64: break;
          case 12: 
            { return new Symbol(sym.FIN_INSTRUCCION, yycolumn, yyline);
            } 
            // fall through
          case 65: break;
          case 13: 
            { return new Symbol(sym.BLOQUE_ABRE, yycolumn, yyline);
            } 
            // fall through
          case 66: break;
          case 14: 
            { return new Symbol(sym.BLOQUE_CIERRA, yycolumn, yyline);
            } 
            // fall through
          case 67: break;
          case 15: 
            { return new Symbol(sym.CORCHETE_ABRE, yycolumn, yyline);
            } 
            // fall through
          case 68: break;
          case 16: 
            { return new Symbol(sym.CORCHETE_CIERRA, yycolumn, yyline);
            } 
            // fall through
          case 69: break;
          case 17: 
            { return new Symbol(sym.PARENTESIS_ABRE, yycolumn, yyline);
            } 
            // fall through
          case 70: break;
          case 18: 
            { return new Symbol(sym.PARENTESIS_CIERRA, yycolumn, yyline);
            } 
            // fall through
          case 71: break;
          case 19: 
            { 
            } 
            // fall through
          case 72: break;
          case 20: 
            { return new Symbol(sym.OP_MAYOR_IGUAL, yycolumn, yyline);
            } 
            // fall through
          case 73: break;
          case 21: 
            { return new Symbol(sym.OP_MENOR_IGUAL, yycolumn, yyline);
            } 
            // fall through
          case 74: break;
          case 22: 
            { return new Symbol(sym.OP_DISTINTO, yycolumn, yyline);
            } 
            // fall through
          case 75: break;
          case 23: 
            { return new Symbol(sym.OP_IGUAL, yycolumn, yyline);
            } 
            // fall through
          case 76: break;
          case 24: 
            { return new Symbol(sym.OP_ASIGNACION, yycolumn, yyline);
            } 
            // fall through
          case 77: break;
          case 25: 
            { addString(yytext()); return new Symbol(sym.CONST_STRING, yycolumn, yyline ,new String(yytext()));
            } 
            // fall through
          case 78: break;
          case 26: 
            { return new Symbol(sym.IF, yycolumn, yyline);
            } 
            // fall through
          case 79: break;
          case 27: 
            { return new Symbol(sym.DO, yycolumn, yyline);
            } 
            // fall through
          case 80: break;
          case 28: 
            { return new Symbol(sym.AND, yycolumn, yyline);
            } 
            // fall through
          case 81: break;
          case 29: 
            { return new Symbol(sym.OR, yycolumn, yyline);
            } 
            // fall through
          case 82: break;
          case 30: 
            { yypushstate(COMENTARIOANIDADO);
            } 
            // fall through
          case 83: break;
          case 31: 
            { addReal(yytext()); return new Symbol(sym.CONST_REAL, yycolumn, yyline ,new String(yytext()));
            } 
            // fall through
          case 84: break;
          case 32: 
            { last_type = "INT";return new Symbol(sym.TIPO_INT, yycolumn, yyline);
            } 
            // fall through
          case 85: break;
          case 33: 
            { return new Symbol(sym.FOR, yycolumn, yyline);
            } 
            // fall through
          case 86: break;
          case 34: 
            { last_type = "REAL";return new Symbol(sym.TIPO_REAL, yycolumn, yyline);
            } 
            // fall through
          case 87: break;
          case 35: 
            { return new Symbol(sym.ELSE, yycolumn, yyline);
            } 
            // fall through
          case 88: break;
          case 36: 
            { last_type = "LONG";return new Symbol(sym.LONG, yycolumn, yyline);
            } 
            // fall through
          case 89: break;
          case 37: 
            { return new Symbol(sym.CASE, yycolumn, yyline);
            } 
            // fall through
          case 90: break;
          case 38: 
            { return new Symbol(sym.ENDIF, yycolumn, yyline);
            } 
            // fall through
          case 91: break;
          case 39: 
            { return new Symbol(sym.OTHER, yycolumn, yyline);
            } 
            // fall through
          case 92: break;
          case 40: 
            { return new Symbol(sym.BREAK, yycolumn, yyline);
            } 
            // fall through
          case 93: break;
          case 41: 
            { return new Symbol(sym.OUTPUT, yycolumn, yyline);
            } 
            // fall through
          case 94: break;
          case 42: 
            { return new Symbol(sym.WHILE, yycolumn, yyline);
            } 
            // fall through
          case 95: break;
          case 43: 
            { return new Symbol(sym.ENDDEF, yycolumn, yyline);
            } 
            // fall through
          case 96: break;
          case 44: 
            { return new Symbol(sym.ENDFOR, yycolumn, yyline);
            } 
            // fall through
          case 97: break;
          case 45: 
            { last_type = "STRING";return new Symbol(sym.TIPO_STRING, yycolumn, yyline);
            } 
            // fall through
          case 98: break;
          case 46: 
            { return new Symbol(sym.DEFVAR, yycolumn, yyline);
            } 
            // fall through
          case 99: break;
          case 47: 
            { return new Symbol(sym.ENDCASE, yycolumn, yyline);
            } 
            // fall through
          case 100: break;
          case 48: 
            { return new Symbol(sym.DISPLAY, yycolumn, yyline);
            } 
            // fall through
          case 101: break;
          case 49: 
            { return new Symbol(sym.ENDWHILE, yycolumn, yyline);
            } 
            // fall through
          case 102: break;
          case 50: 
            { return new Symbol(sym.DECLARESECTION, yycolumn, yyline);
            } 
            // fall through
          case 103: break;
          case 51: 
            { return new Symbol(sym.PROGRAMSECTION, yycolumn, yyline);
            } 
            // fall through
          case 104: break;
          case 52: 
            { return new Symbol(sym.ENDDECLARESECTION, yycolumn, yyline);
            } 
            // fall through
          case 105: break;
          case 53: 
            { return new Symbol(sym.ENDPROGRAMSECTION, yycolumn, yyline);
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
