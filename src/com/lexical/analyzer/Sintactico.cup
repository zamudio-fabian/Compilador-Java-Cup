package com.lexical.analyzer;


import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;

parser code
{:
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + s + " no reconocido. valor " + s.value );
    }

    
 

:}

action code
{:
    public String resultado="";


:}


terminal INICIO, FIN, TIPO_REAL, TIPO_STRING, TIPO_INT, LONG, DEFVAR, ENDDEF, ELSE;
terminal CASE, DO, BREAK, ENDCASE, FOR, ENDFOR, IF, ENDIF, WHILE, ID;
terminal ENDWHILE, DISPLAY, OTHER, DECLARESECTION, ENDDECLARESECTION;
terminal PROGRAMSECTION, ENDPROGRAMSECTION, OUTPUT, COMA, FIN_INSTRUCCION, OP_ASIGNACION, OP_SUMA;
terminal OP_RESTA, OP_MULTIPLICACION, OP_DIVISION, OP_IGUAL, OP_DISTINTO, OP_MAYOR, OP_MENOR;
terminal OP_MAYOR_IGUAL, OP_MENOR_IGUAL, AND, OR, BLOQUE_ABRE, BLOQUE_CIERRA, CORCHETE_ABRE;
terminal CORCHETE_CIERRA, PARENTESIS_ABRE, PARENTESIS_CIERRA, DOS_PUNTOS, CONST_STRING, CONST_INT, CONST_REAL;

non terminal pgm, tipo;
non terminal bloque_declaraciones_variables, lista_declaraciones_variables, declaracion_variables, lista_variables;
non terminal bloque_sentencias, sentencias;

start with pgm;

pgm ::= bloque_sentencias:bs {: System.out.println("REGLA[0]= NUEVO PROGRAMA SIN VARIABLES");:} 
		|bloque_declaraciones_variables:bdv bloque_sentencias:bs {: System.out.println("REGLA[1]= NUEVO PROGRAMA CON VARIABLES");:};

bloque_declaraciones_variables ::= DECLARESECTION lista_declaraciones_variables ENDDECLARESECTION {:System.out.println("[REGLA[2]= BLOQUE DE DECLARACIÓN DE VARIABLES"); :};

lista_declaraciones_variables ::= lista_declaraciones_variables:dv declaracion_variables:l {:System.out.println("REGLA[3]= DECLARACIÓN DE CONJUNTO DE VARIABLES"); :}
                            | declaracion_variables:l {:System.out.println("REGLA[4]= DECLARACION DE VARIABLES"); :};

declaracion_variables ::= tipo:t DOS_PUNTOS lista_variables FIN_INSTRUCCION {:System.out.println("REGLA[5]= LISTA DE VARIABLES"); :};

lista_variables ::= lista_variables COMA ID {:System.out.println("REGLA[6]= CONJUNTO DE VARIABLES MAS VARIABLE"); :}
					| ID {:System.out.println("REGLA[7]= VARIABLE"); :};
									
tipo ::= TIPO_INT {:System.out.println("REGLA[8]= TIPO INT"); :}
		|TIPO_STRING {:System.out.println("REGLA[9]= TIPO STRING"); :}
        |TIPO_REAL {:System.out.println("REGLA[10]= TIPO REAL"); :};
		
bloque_sentencias ::= PROGRAMSECTION sentencias:ss ENDPROGRAMSECTION {:System.out.println("[REGLA[3]= BLOQUE DE DECLARACIÓN DE SENTENCIAS"); :};

sentencias ::= DISPLAY PARENTESIS_ABRE CONST_STRING PARENTESIS_CIERRA FIN_INSTRUCCION {:System.out.println("MEJORAR LAS SENTENCIAS DEL CUERPO"); :};


